"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[6619],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,s(s({ref:t},l),{},{components:n})):r.createElement(h,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5562:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:2},p="PSP22 with OpenBrush",c={unversionedId:"wasm/sc-dev/tutorials/psp22-openbrush",id:"wasm/sc-dev/tutorials/psp22-openbrush",title:"PSP22 with OpenBrush",description:"This example shows how you can reuse the implementation of [PSP22] token. Also, this example shows how you can customize the logic, for example, to reject transferring tokens to hated_account.",source:"@site/docs/wasm/sc-dev/tutorials/psp22-openbrush.md",sourceDirName:"wasm/sc-dev/tutorials",slug:"/wasm/sc-dev/tutorials/psp22-openbrush",permalink:"/docs/wasm/sc-dev/tutorials/psp22-openbrush",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/wasm/sc-dev/tutorials/psp22-openbrush.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Basic Contract",permalink:"/docs/wasm/sc-dev/tutorials/basic-contract"},next:{title:"PolkadotJS UI",permalink:"/docs/wasm/sc-dev/tutorials/polkadotjs-ui"}},l={},u=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",level:2},{value:"Step 2: Add imports and enable unstable feature",id:"step-2-add-imports-and-enable-unstable-feature",level:2},{value:"Step 3: Define storage",id:"step-3-define-storage",level:2},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",level:2},{value:"Step 5: Define constructor",id:"step-5-define-constructor",level:2},{value:"Step 6: Customize your contract",id:"step-6-customize-your-contract",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"psp22-with-openbrush"},"PSP22 with OpenBrush"),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/src/token/psp22"},"PSP22")," token. Also, this example shows how you can customize the logic, for example, to reject transferring tokens to ",(0,a.kt)("inlineCode",{parentName:"p"},"hated_account"),"."),(0,a.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,a.kt)("p",null,"Include ",(0,a.kt)("inlineCode",{parentName:"p"},"openbrush")," as dependency in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," or you can use this ",(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/overview#the-default-toml-of-your-project-with-openbrush"},"default ",(0,a.kt)("inlineCode",{parentName:"a"},"Cargo.toml")," template"),". After you need to enable default implementation of PSP22 via ",(0,a.kt)("inlineCode",{parentName:"p"},"openbrush")," features."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'openbrush = { version = "~2.0.0", default-features = false, features = ["psp22"] }\n')),(0,a.kt)("h2",{id:"step-2-add-imports-and-enable-unstable-feature"},"Step 2: Add imports and enable unstable feature"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"openbrush::contract")," macro instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"ink::contract"),". Import everything from ",(0,a.kt)("inlineCode",{parentName:"p"},"openbrush::contracts::psp22"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[openbrush::contract]\npub mod my_psp22 {\n    use openbrush::contracts::psp22::*;\n    use ink_prelude::string::String;\n    use ink_storage::traits::SpreadAllocate;\n...\n')),(0,a.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,a.kt)("p",null,"Declare the storage struct and declare the field related to the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Storage")," trait. Then you need to derive the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Storage")," trait and mark the corresponding field with the ",(0,a.kt)("inlineCode",{parentName:"p"},"#[PSP22StorageField]")," attribute. Deriving this trait allows you to reuse the default implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, SpreadAllocate, PSP22Storage)]\npub struct MyPSP22 {\n    #[PSP22StorageField]\n    psp22: PSP22Data,\n}\n")),(0,a.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,a.kt)("p",null,"Inherit the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," trait. You can customize (override) methods in the ",(0,a.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl PSP22 for MyPSP22 {}\n")),(0,a.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,a.kt)("p",null,"Define constructor. Your basic version of ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," contract is ready!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'impl MyPSP22 {\n   #[ink(constructor)]\n    pub fn new(total_supply: Balance) -> Self {\n        ink_lang::codegen::initialize_contract(|instance: &mut MyPSP22| {\n            instance\n                ._mint(instance.env().caller(), total_supply)\n                .expect("Should mint");\n        })\n    }\n}\n')),(0,a.kt)("h2",{id:"step-6-customize-your-contract"},"Step 6: Customize your contract"),(0,a.kt)("p",null,"Customize it by adding hated account logic. It will contain two public methods ",(0,a.kt)("inlineCode",{parentName:"p"},"set_hated_account")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"get_hated_account"),". Also we will override ",(0,a.kt)("inlineCode",{parentName:"p"},"_before_token_transfer")," method in the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," implementation (that methods defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Transfer")," trait), and we will add the ",(0,a.kt)("inlineCode",{parentName:"p"},"hated_account: AccountId")," field to the structure."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink(storage)]\n#[derive(Default, SpreadAllocate, PSP22Storage)]\npub struct MyPSP22 {\n    #[PSP22StorageField]\n    psp22: PSP22Data,\n    // fields for hater logic\n    hated_account: AccountId,\n}\n\nimpl PSP22Transfer for MyPSP22 {\n    // Let\'s override method to reject transactions to bad account\n    fn _before_token_transfer(\n        &mut self,\n        _from: Option<&AccountId>,\n        to: Option<&AccountId>,\n        _amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        if to == Some(&self.hated_account) {\n            return Err(PSP22Error::Custom(String::from("I hate this account!")))\n        }\n        Ok(())\n    }\n}\n\nimpl PSP22 for MyPSP22 {}\n\nimpl MyPSP22 {\n    #[ink(constructor)]\n    pub fn new(total_supply: Balance) -> Self {\n        ink_lang::codegen::initialize_contract(|instance: &mut MyPSP22| {\n            instance\n                ._mint(instance.env().caller(), total_supply)\n                .expect("Should mint");\n        })\n    }\n\n    #[ink(message)]\n    pub fn set_hated_account(&mut self, hated: AccountId) {\n        self.hated_account = hated;\n    }\n\n    #[ink(message)]\n    pub fn get_hated_account(&self) -> AccountId {\n        self.hated_account.clone()\n    }\n}\n')),(0,a.kt)("p",null,"You can check an example of the usage of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/src/token/psp22"},"PSP22"),"."),(0,a.kt)("p",null,"Also you can use extensions for PSP22 token:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/metadata"},"PSP22Metadata"),": metadata for PSP22."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/mintable"},"PSP22Mintable"),": creation of new tokens."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/burnable"},"PSP22Burnable"),": destruction of own tokens."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/wrapper"},"PSP22Wrapper"),": token wrapper for PSP22."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/flashmint"},"PSP22FlashMint"),": extension which allows the user to perform flashloans on the token by minting and burning the token."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/extensions/capped"},"PSP22Capped"),": extension which adds a cap for total supply of PSP22 tokens."),(0,a.kt)("p",null,"Check out the utilities for PSP22 token:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.openbrush.io/smart-contracts/psp22/utils/token-timelock"},"PSP22TokenTimelock"),": utility for locking PSP22 tokens for a specified time."))}m.isMDXComponent=!0}}]);