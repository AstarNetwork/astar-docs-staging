"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[7261],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3804:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},d="SubQuery",l={unversionedId:"integrations/indexers/subquery",id:"integrations/indexers/subquery",title:"SubQuery",description:"What is SubQuery?",source:"@site/docs/integrations/indexers/subquery.md",sourceDirName:"integrations/indexers",slug:"/integrations/indexers/subquery",permalink:"/docs/integrations/indexers/subquery",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/integrations/indexers/subquery.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Subsquid",permalink:"/docs/integrations/indexers/subsquid"},next:{title:"Covalent",permalink:"/docs/integrations/indexers/covalent"}},c={},p=[{value:"What is SubQuery?",id:"what-is-subquery",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Setting up typedef for connecting to parachain",id:"setting-up-typedef-for-connecting-to-parachain",level:3},{value:"Setup entity for storing event topics",id:"setup-entity-for-storing-event-topics",level:3},{value:"Setup handler for indexing",id:"setup-handler-for-indexing",level:3},{value:"Deploy indexer",id:"deploy-indexer",level:3},{value:"Exploring collected data",id:"exploring-collected-data",level:3},{value:"Glossary",id:"glossary",level:2},{value:"Topic",id:"topic",level:3},{value:"Entity",id:"entity",level:3},{value:"GraphQL",id:"graphql",level:3}],u={toc:p};function m(e){var n=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subquery"},"SubQuery"),(0,i.kt)("h2",{id:"what-is-subquery"},"What is SubQuery?"),(0,i.kt)("p",null,"SubQuery\u2019s goal is to become an Omni indexer for both EVM/substrate-native smart contract infrastructure in the Polkadot ecosystem. Connecting directly to substrate with WebSocket, developers can get an insight into their smart contracts from Subquery\u2019s indexing mechanism by detecting smart contract events in a more native way without running separate RPC nodes for HTTP connection. The insights are often used for recent trades in DEXes, yield reserves tracking in money markets, NFT transfers, and many more. In this tutorial, we will look at how to set up a substrate native indexer for frontier EVM tracking ERC20 token transfers."),(0,i.kt)("p",null,"SubQuery has an advantage over Graph in that it requires javascript or typescript while each subgraph requires AssemblyScript, which is a more focused native-friendly language and may have unexpected behavior. It also tracks EVM calls so that developers can still make insight out of calls without adding event code. For deployment workflow, since Subgraph is made for the public, it requires developers to add Subgraphs one by one, but Subquery just needs one command to build a dedicated indexer."),(0,i.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,i.kt)("p",null,"Before you setup SubQuery for your platform, you need:"),(0,i.kt)("p",null,"-",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," : Containerization platform for software solutions\n-",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"docker-compose")," : Used to automate interactions between docker containers\n-",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL"),": Simple knowledge on how to propose entity and query it is required"),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,"First of all, clone the boilerplate for setting up the indexer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/AstarNetwork/astar-evm-example.git\ncd astar-evm-example\nyarn\n")),(0,i.kt)("h3",{id:"setting-up-typedef-for-connecting-to-parachain"},"Setting up typedef for connecting to parachain"),(0,i.kt)("p",null,"To connect to parachain with websocket, type definitions, typedef in short, is used to encode data for communication. ",(0,i.kt)("inlineCode",{parentName:"p"},"chainTypes.ts")," manages the manifest of the types of data that will be shared between the parachain and the indexer. As Astar.js goes through an upgrade of type definitions, ",(0,i.kt)("inlineCode",{parentName:"p"},"chainTypes.ts")," has to be updated with the latest typedefs to be fully able to connect to parachain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import type { OverrideBundleDefinition } from "@polkadot/types/types";\n\nconst definitions: OverrideBundleDefinition = {\n    types: [\n        {\n            // on all versions\n            minmax: [0, undefined],\n            types: {\n                Keys: "AccountId",\n                Address: "MultiAddress",\n                LookupSource: "MultiAddress",\n                AmountOf: "Amount",\n                Amount: "i128",\n                SmartContract: {\n                    _enum: {\n                        Evm: "H160",\n                        Wasm: "AccountId",\n                    },\n                },\n                EraStakingPoints: {\n                    total: "Balance",\n                    stakers: "BTreeMap<AccountId, Balance>",\n                    formerStakedEra: "EraIndex",\n                    claimedRewards: "Balance",\n                },\n                EraRewardAndStake: {\n                    rewards: "Balance",\n                    staked: "Balance",\n                },\n                EraIndex: "u32",\n            },\n        },\n    ],\n};\n\nexport default { typesBundle: definitions };\n')),(0,i.kt)("h3",{id:"setup-entity-for-storing-event-topics"},"Setup entity for storing event topics"),(0,i.kt)("p",null,"SubQuery indexer filters event topics from the connected parachain and then stores them in its database for search. A topic is a unit of event data on a Solidity smart contract that is used for giving updates to its state. ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," declares the shape of data which event data is stored in the indexer database through the handler. To declare an entity to store event topics, you can edit ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.graphql")," in the root directory with GraphQL syntax."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Transfer @entity {\n  id: ID! # Tx hash\n\n  from: String!\n  to: String!\n  contractAddress: String!\n  amount: BigInt!\n  blockNumber: BigInt!\n}\n")),(0,i.kt)("p",null,"After declaring entity, you can run command ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn codegen")," to generate model types for handling events in handler code. Then, ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory will have types ready for the handler to add indexing logic. ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," is the directory which declares data entities as models for handler to manage."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src/\n\u251c\u2500\u2500 chaintypes.ts\n\u251c\u2500\u2500 index.ts\n\u251c\u2500\u2500 mappings\n\u2502   \u2514\u2500\u2500 mappingHandlers.ts\n**\u2514\u2500\u2500 types\n    \u251c\u2500\u2500 index.ts\n    \u2514\u2500\u2500 models\n        \u251c\u2500\u2500 Transfer.ts\n        \u2514\u2500\u2500 index.ts**\n")),(0,i.kt)("h3",{id:"setup-handler-for-indexing"},"Setup handler for indexing"),(0,i.kt)("p",null,"Now that storage is declared, we can use handler to declare how to add data on each event emission. ",(0,i.kt)("inlineCode",{parentName:"p"},"mappings")," directory stores handlers mapping solidity event topic to SubQuery data entity. In this tutorial, we will see how erc20 transfer event is handled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// import model from types\nimport { Transfer } from "../types"; \n// contract processor library\nimport {\n  FrontierEvmEvent,\n} from "@subql/contract-processors/dist/frontierEvm";\n// uint256 in js\nimport { BigNumber } from "@ethersproject/bignumber";\n\n// event data declaration \n//[ /*topic types in order address as string */ ] & {\n// /*\n//   mapping of event topic args and types\n// */\ntype TransferEventArgs = [string, string, BigNumber] & {\n  from: string;\n  to: string;\n  value: BigNumber;\n};\n\n// When event occurs\nexport async function handleERC20Transfer(\n  event: FrontierEvmEvent<TransferEventArgs>\n): Promise<void> {\n  logger.warn("Calling handleERC20Transfer");\n  // fill entity with event data\n  const transfer = Transfer.create({\n    amount: event.args.value.toBigInt(),\n    from: event.args.from,\n    to: event.args.to,\n    contractAddress: event.address,\n    blockNumber: BigInt(event.blockNumber),\n    id: event.transactionHash,\n  });\n // save it to indexer database\n  await transfer.save();\n}\n')),(0,i.kt)("p",null,"SubQuery indexer can also track calls for solidity precompiles which event is hard to track."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Transfer } from "../types";\nimport {\n  FrontierEvmCall\n} from "@subql/contract-processors/dist/frontierEvm";\nimport { BigNumber } from "@ethersproject/bignumber";\n\ntype TransferCallArgs = [string, BigNumber] & {\n  _to: string;\n  _value: BigNumber;\n};\n\nexport async function handleERC20TransferCall(\n  call: FrontierEvmCall<TransferCallArgs>\n): Promise<void> {\n  logger.warn("Calling handleERC20TransferCall");\n\n  const transfer = Transfer.create({\n    amount: call.args._value.toBigInt(),\n    from: call.from,\n    to: call.args._to,\n    contractAddress: call.to,\n    id: call.hash,\n    blockNumber: undefined,\n  });\n\n  await transfer.save();\n}\n')),(0,i.kt)("p",null,"Once the handler is built, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn build")," to compile codes into a deployable format. Confirm ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," directory is formed in the root directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"astar-evm-example\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n**\u251c\u2500\u2500 dist**\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 erc20.abi.json\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 project.yaml\n\u251c\u2500\u2500 schema.graphql\n\u251c\u2500\u2500 src\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 yarn.lock\n")),(0,i.kt)("h3",{id:"deploy-indexer"},"Deploy indexer"),(0,i.kt)("p",null,"SubQuery indexer is a multi-container solution that runs with 3 different containers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"postgres")," : Database which stores all data from indexer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subquery-node")," : Event subscriber which detects EVM call/event from connected blockchain then writes in the database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphql-engine")," : GraphQL engine which indexes stored data in the database")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," already handles specification of how they are connected, but ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," has to be edited to give information to ",(0,i.kt)("inlineCode",{parentName:"p"},"subquery-node")," on what to track in its container."),(0,i.kt)("p",null,"Here is the each necessary information in ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," which needs to be adjusted."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# metadata\nspecVersion: 0.2.0 \nname: astar-evm \nversion: 0.0.1\ndescription: This SubQuery project can be use as a starting point for Astar network\nrepository: <https://github.com/subquery/astar-subql-starters>\n# schema directory\nschema:\n  file: ./schema.graphql\n# network \nnetwork:\n  # wss endpoint\n  endpoint: wss://astar.api.onfinality.io/public-wss \n  # genesis hash of connecting blockchahin\n  genesisHash: '0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'\n  # chain types directory\n  chaintypes:\n    file: ./dist/chaintypes.js\ndataSources:\n  # one kind per one contract to track\n  - kind: substrate/FrontierEvm\n    startBlock: 436282 # block to start tracking events\n\n    assets:\n    # Smart contract ABIs\n      erc20: # declare ABI to refer within the file\n        file: './erc20.abi.json' # abi file directory\n    # Processor library for websocket data\n    processor:\n      file: './node_modules/@subql/contract-processors/dist/frontierEVM.js'\n      options:\n        abi: erc20\n        address: '0x3d4dcfd2b483549527f7611ccfecb40b47d0c17b'\n    # mapping for contract event\n    mapping:\n      file: ./dist/index.js\n      handlers:\n        - handler: handleFrontierEvmEvent\n          kind: substrate/FrontierEvmEvent\n          filter:\n            ## Topics that follow Ethereum JSON-RPC log filters\n            ## <https://docs.ethers.io/v5/concepts/events/>\n            ## With a couple of added benefits:\n            ##  - Values don't need to be 0 padded\n            ##  - Event fragments can be provided and automatically converted to their id\n            topics:\n              ## Example valid values:\n              # - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n              # - Transfer(address,address,u256)\n              # - Transfer(address from,address to,uint256 value)\n\n              ## Example of OR filter, will capture Transfer or Approval events\n              # - - 'Transfer(address indexed from,address indexed to,uint256 value)'\n              #   - 'Approval(address indexed owner, address indexed spender, uint256 value)'\n\n              - Transfer(address indexed from,address indexed to,uint256 value)\n        - handler: handleFrontierEvmCall\n          kind: substrate/FrontierEvmCall\n          filter:\n            ## The function can either be the method fragment or signature\n            # function: '0x095ea7b3'\n            # function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'\n            # function: approve(address,uint256)\n            function: approve(address to,uint256 value)\n            ## The transaction sender\n            from: '0x6bd193ee6d2104f14f94e2ca6efefae561a4334b'\n")),(0,i.kt)("p",null,"After editing project.yaml , execute docker-compose to pull the latest containers and deploy"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose pull && docker-compose up\n")),(0,i.kt)("h3",{id:"exploring-collected-data"},"Exploring collected data"),(0,i.kt)("p",null,"After you run ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose"),", SubQuery supports GraphiQL playground to explore indexed data. You can explore the data by sending GraphQL queries at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"4",src:t(2783).Z,width:"1865",height:"998"})),(0,i.kt)("h2",{id:"glossary"},"Glossary"),(0,i.kt)("h3",{id:"topic"},"Topic"),(0,i.kt)("p",null,"A unit of event subscription data on a Solidity smart contract is used for giving updates to its state."),(0,i.kt)("h3",{id:"entity"},"Entity"),(0,i.kt)("p",null,"A distinctive data structure that is used to store event topics in the database of SubQuery indexer"),(0,i.kt)("h3",{id:"graphql"},"GraphQL"),(0,i.kt)("p",null,"An indexing tool for aggregated data"))}m.isMDXComponent=!0},2783:function(e,n,t){n.Z=t.p+"assets/images/4-0f428a861ed9b2a83ee6394f7d3f56c7.png"}}]);