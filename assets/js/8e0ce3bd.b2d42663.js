"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[3437],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},c=Object.keys(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=a.createContext({}),s=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,c=t.originalType,l=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),u=s(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||c;return n?a.createElement(h,r(r({ref:e},d),{},{components:n})):a.createElement(h,r({ref:e},d))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var c=n.length,r=new Array(c);r[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:o,r[1]=i;for(var s=2;s<c;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6222:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var a=n(7462),o=n(3366),c=(n(7294),n(3905)),r=["components"],i={sidebar_position:1},l="`cargo-contract` CLI",s={unversionedId:"wasm/sc-dev/tools/cargo-contract-cli",id:"wasm/sc-dev/tools/cargo-contract-cli",title:"`cargo-contract` CLI",description:"cargo-contract is a CLI tool that helps you develop smart contracts in Parity's [ink!].",source:"@site/docs/wasm/sc-dev/tools/cargo-contract-cli.md",sourceDirName:"wasm/sc-dev/tools",slug:"/wasm/sc-dev/tools/cargo-contract-cli",permalink:"/docs/wasm/sc-dev/tools/cargo-contract-cli",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/wasm/sc-dev/tools/cargo-contract-cli.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/docs/wasm/sc-dev/tools/"},next:{title:"Swanky CLI",permalink:"/docs/wasm/sc-dev/tools/swanky"}},d={},p=[{value:"Usage",id:"usage",level:2},{value:"<code>cargo contract new my_contract</code>",id:"cargo-contract-new-my_contract",level:3},{value:"<code>cargo +nightly contract build</code>",id:"cargo-nightly-contract-build",level:3},{value:"<code>cargo contract check</code>",id:"cargo-contract-check",level:3},{value:"<code>cargo contract test</code>",id:"cargo-contract-test",level:3},{value:"<code>cargo contract upload</code>",id:"cargo-contract-upload",level:3},{value:"<code>cargo contract instantiate</code>",id:"cargo-contract-instantiate",level:3},{value:"<code>cargo contract call</code>",id:"cargo-contract-call",level:3},{value:"<code>cargo contract decode</code>",id:"cargo-contract-decode",level:3},{value:"Documentation",id:"documentation",level:2}],u={toc:p};function m(t){var e=t.components,n=(0,o.Z)(t,r);return(0,c.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"cargo-contract-cli"},(0,c.kt)("inlineCode",{parentName:"h1"},"cargo-contract")," CLI"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"cargo-contract")," is a CLI tool that helps you develop smart contracts in Parity's ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink"},"ink!"),"."),(0,c.kt)("p",null,"It is mainly used to build your smart contracts (and build Wasm blob + metadata)."),(0,c.kt)("h2",{id:"usage"},"Usage"),(0,c.kt)("p",null,"You can always use ",(0,c.kt)("inlineCode",{parentName:"p"},"cargo contract help")," to print information on available commands and their usage. For each command, there is also a ",(0,c.kt)("inlineCode",{parentName:"p"},"--help")," flag with info on additional parameters, e.g. ",(0,c.kt)("inlineCode",{parentName:"p"},"cargo contract new --help"),"."),(0,c.kt)("h3",{id:"cargo-contract-new-my_contract"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract new my_contract")),(0,c.kt)("p",null,"Creates an initial smart contract with some scaffolding code into a new folder ",(0,c.kt)("inlineCode",{parentName:"p"},"my_contract")," ."),(0,c.kt)("p",null,"The contract contains the source code for the ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"Flipper"),' contract, which is about the simplest "smart" contract you can build \u2012 a bool that gets flipped from ',(0,c.kt)("inlineCode",{parentName:"p"},"true")," to ",(0,c.kt)("inlineCode",{parentName:"p"},"false")," through the",(0,c.kt)("inlineCode",{parentName:"p"},"flip()")," function."),(0,c.kt)("h3",{id:"cargo-nightly-contract-build"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo +nightly contract build")),(0,c.kt)("p",null,"Compiles the contract into optimized Wasm bytecode, generates metadata for it, and bundles both together in a ",(0,c.kt)("inlineCode",{parentName:"p"},"my_contract.contract")," file, which you can use for deploying the contract on-chain."),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"cargo contract build")," must be run using the ",(0,c.kt)("inlineCode",{parentName:"p"},"nightly")," toolchain. If you have ",(0,c.kt)("inlineCode",{parentName:"p"},"rustup")," installed, the simplest way to do so is ",(0,c.kt)("inlineCode",{parentName:"p"},"cargo +nightly contract build"),"."),(0,c.kt)("p",null,"To avoid having to always add ",(0,c.kt)("inlineCode",{parentName:"p"},"+nightly")," you can also set nightly as the default toolchain of a directory by executing rustup override set nightly in it."),(0,c.kt)("h3",{id:"cargo-contract-check"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract check")),(0,c.kt)("p",null,"Checks that the code builds as Wasm. This command does not output any ",(0,c.kt)("inlineCode",{parentName:"p"},".contract")," artifacts to the ",(0,c.kt)("inlineCode",{parentName:"p"},"target/")," directory."),(0,c.kt)("h3",{id:"cargo-contract-test"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract test")),(0,c.kt)("p",null,"Runs test suites defined for a smart contract off-chain."),(0,c.kt)("h3",{id:"cargo-contract-upload"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract upload")),(0,c.kt)("p",null,"Upload a contract to a ",(0,c.kt)("inlineCode",{parentName:"p"},"pallet-contract")," enabled chain. See ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract/blob/master/docs/extrinsics.md"},"extrinsics"),"."),(0,c.kt)("h3",{id:"cargo-contract-instantiate"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract instantiate")),(0,c.kt)("p",null,"Create an instance of a contract on-chain. See ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract/blob/master/docs/extrinsics.md"},"extrinsics"),"."),(0,c.kt)("h3",{id:"cargo-contract-call"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract call")),(0,c.kt)("p",null,"Invoke a message on an existing contract on-chain. See ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract/blob/master/docs/extrinsics.md"},"extrinsics"),"."),(0,c.kt)("h3",{id:"cargo-contract-decode"},(0,c.kt)("inlineCode",{parentName:"h3"},"cargo contract decode")),(0,c.kt)("p",null,"Decodes a contract's input or output data."),(0,c.kt)("p",null,"This can be either an event, an invocation of a contract message, or an invocation of a contract constructor."),(0,c.kt)("p",null,"The argument has to be given as hex-encoding, starting with ",(0,c.kt)("inlineCode",{parentName:"p"},"0x"),"."),(0,c.kt)("h2",{id:"documentation"},"Documentation"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract#usage"},"cargo-contract Github repo")))}m.isMDXComponent=!0}}]);