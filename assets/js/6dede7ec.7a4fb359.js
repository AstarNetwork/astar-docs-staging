"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[9998],{3905:function(e,n,t){t.d(n,{Zo:function(){return h},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=l(t),u=a,m=c["".concat(p,".").concat(u)]||c[u]||d[u]||o;return t?r.createElement(m,i(i({ref:n},h),{},{components:t})):r.createElement(m,i({ref:n},h))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8211:function(e,n,t){t.r(n),t.d(n,{assets:function(){return h},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:4},p="The Graph",l={unversionedId:"integrations/indexers/thegraph",id:"integrations/indexers/thegraph",title:"The Graph",description:"[The Graph]//thegraph.com/en/",source:"@site/docs/integrations/indexers/thegraph.md",sourceDirName:"integrations/indexers",slug:"/integrations/indexers/thegraph",permalink:"/docs/integrations/indexers/thegraph",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/integrations/indexers/thegraph.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Covalent",permalink:"/docs/integrations/indexers/covalent"},next:{title:"DIA",permalink:"/docs/integrations/oracles/dia"}},h={},d=[{value:"Overview: Why is The Graph needed?",id:"overview-why-is-the-graph-needed",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"One-line startup script",id:"one-line-startup-script",level:2},{value:"Astar",id:"astar",level:3},{value:"Shiden",id:"shiden",level:3},{value:"Shibuya",id:"shibuya",level:3},{value:"Running Graph node",id:"running-graph-node",level:2},{value:"Modifying the Ethereum environment",id:"modifying-the-ethereum-environment",level:2},{value:"Astar",id:"astar-1",level:3},{value:"Shiden",id:"shiden-1",level:3},{value:"Shibuya",id:"shibuya-1",level:3},{value:"Running The Graph containers",id:"running-the-graph-containers",level:2}],c={toc:d};function u(e){var n=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-graph"},"The Graph"),(0,o.kt)("h2",{id:"overview-why-is-the-graph-needed"},"Overview: Why is The Graph needed?"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/en/"},"The Graph")," is a decentralized protocol for indexing and querying data from blockchains. It makes querying fast, reliable and secure but also allows anyone to build and publish application programming interfaces (APIs) called subgraphs, which act as intermediaries and allow two applications to communicate with each other."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Before you run The Graph node in a server, you must install:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker"),": Containerization platform for software solutions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker-compose"))," : Used to automate interactions between docker containers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/download/"},"JQ"),": JSON processor for graph requests")),(0,o.kt)("p",null,"In this guide, you will learn how to run an Astar node for getting more insight into the transactions of blockchain, providing indexing data to The Graph node."),(0,o.kt)("h2",{id:"one-line-startup-script"},"One-line startup script"),(0,o.kt)("p",null,"If one wants to finish the process without explanation, here is the one-line script for you. if you face an error upon execution, the descriptions below will help you to find where it needs to be adjusted. This script supposes that the running computer has installed all prerequisites."),(0,o.kt)("h3",{id:"astar"},"Astar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo curl -s <https://raw.githubusercontent.com/AstarNetwork/Astar/rpc-script/scripts/graph.sh> > graph.sh \\\n&& sudo bash ./graph.sh \\\n-chain astar \\\n-rpc-url <RPC URL>\n")),(0,o.kt)("h3",{id:"shiden"},"Shiden"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo curl -s <https://raw.githubusercontent.com/AstarNetwork/Astar/rpc-script/scripts/graph.sh> > graph.sh \\\n&& sudo bash ./graph.sh \\\n-chain shiden \\\n-rpc-url <RPC URL>\n")),(0,o.kt)("h3",{id:"shibuya"},"Shibuya"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo curl -s <https://raw.githubusercontent.com/AstarNetwork/Astar/rpc-script/scripts/graph.sh> > graph.sh \\\n&& sudo bash ./graph.sh \\\n-chain shibuya \\\n-rpc-url <RPC URL>\n")),(0,o.kt)("h2",{id:"running-graph-node"},"Running Graph node"),(0,o.kt)("p",null,"After successfully running an",(0,o.kt)("a",{parentName:"p",href:"https://docs.astar.network/maintain/archive-node/docker"},"RPC node"),", The Graph node needs to be installed and configured for Shiden to connect to a separate computer. If you are running a self-signed RPC node, you need to set up an extra environment variable for allowance."),(0,o.kt)("p",null,"The first step is to clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphprotocol/graph-node/"},"Graph Node repository"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git clone <https://github.com/graphprotocol/graph-node/> \\\\\n&& cd graph-node/docker\n")),(0,o.kt)("p",null,"Next, execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"setup.sh")," file. This will pull all the necessary Docker images and write the necessary information in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file. Make sure you have ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")," are installed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo bash ./setup.sh\n")),(0,o.kt)("p",null,"After running the command, the tail end of the command should show similar logs as below:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"8",src:t(9531).Z,width:"1198",height:"1104"})),(0,o.kt)("p",null,'Once everything is set up, you need to modify the "Ethereum environment" inside the ',(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file, so that The Graph node points to the endpoint of the RPC that you are connecting with. Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"setup.sh")," file detects RPC's Host IP and writes its value, so you'll need to modify it accordingly."),(0,o.kt)("h2",{id:"modifying-the-ethereum-environment"},"Modifying the Ethereum environment"),(0,o.kt)("h3",{id:"astar-1"},"Astar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# open docker-compose.yml\nnano docker-compose.yml\n\n# modify file and save\nethereum: 'astar:https://<IP address or domain>:<PORT>'\n")),(0,o.kt)("h3",{id:"shiden-1"},"Shiden"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# open docker-compose.yml\nnano docker-compose.yml\n\n# modify file and save\nethereum: 'shiden:https://<IP address or domain>:<PORT>'\n")),(0,o.kt)("h3",{id:"shibuya-1"},"Shibuya"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# open docker-compose.yml\nnano docker-compose.yml\n\n# modify file and save\nethereum: 'shibuya:https://<IP address or domain>:<PORT>'\n")),(0,o.kt)("p",null,"For example, if you are building The Graph node for Shiden, the entire ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," now should look like this below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\nservices:\n  graph-node:\n    image: graphprotocol/graph-node\n    ports:\n      - '8000:8000'\n      - '8001:8001'\n      - '8020:8020'\n      - '8030:8030'\n      - '8040:8040'\n    depends_on:\n      - ipfs\n      - postgres\n    environment:\n      postgres_host: postgres\n      postgres_user: graph-node\n      postgres_pass: let-me-in\n      postgres_db: graph-node\n      ipfs: 'ipfs:5001'\n      ethereum: 'shiden:http://<IP address or DOMAIN>:<PORT>'\n      RUST_LOG: info\n  ipfs:\n    image: ipfs/go-ipfs:v0.4.23\n    ports:\n      - '5001:5001'\n    volumes:\n      - ./data/ipfs:/data/ipfs\n  postgres:\n    image: postgres\n    ports:\n      - '5432:5432'\n    command: [\"postgres\", \"-cshared_preload_libraries=pg_stat_statements\"]\n    environment:\n      POSTGRES_USER: graph-node\n      POSTGRES_PASSWORD: let-me-in\n      POSTGRES_DB: graph-node\n    volumes:\n      - ./data/postgres:/var/lib/postgresql/data\n")),(0,o.kt)("h2",{id:"running-the-graph-containers"},"Running The Graph containers"),(0,o.kt)("p",null,"Run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo docker-compose up\n")),(0,o.kt)("p",null,"When everything is set up you will see the log like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"9",src:t(6316).Z,width:"1067",height:"260"})))}u.isMDXComponent=!0},9531:function(e,n,t){n.Z=t.p+"assets/images/8-b5676278ad3f464fff6ac86d2cd11d1f.png"},6316:function(e,n,t){n.Z=t.p+"assets/images/9-ef77f7226bae4edbe9102bf24bc5981e.png"}}]);