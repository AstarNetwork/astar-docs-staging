"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[5132],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8748:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],c={sidebar_position:1},s="Basic Contract",l={unversionedId:"wasm/sc-dev/tutorials/basic-contract",id:"wasm/sc-dev/tutorials/basic-contract",title:"Basic Contract",description:"Using cargo-contracts",source:"@site/docs/wasm/sc-dev/tutorials/basic-contract.md",sourceDirName:"wasm/sc-dev/tutorials",slug:"/wasm/sc-dev/tutorials/basic-contract",permalink:"/docs/wasm/sc-dev/tutorials/basic-contract",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/wasm/sc-dev/tutorials/basic-contract.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Swanky CLI",permalink:"/docs/wasm/sc-dev/tools/swanky"},next:{title:"PSP22 with OpenBrush",permalink:"/docs/wasm/sc-dev/tutorials/psp22-openbrush"}},u={},p=[{value:"Using <code>cargo-contracts</code>",id:"using-cargo-contracts",level:2},{value:"Manual Mode",id:"manual-mode",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-contract"},"Basic Contract"),(0,i.kt)("h2",{id:"using-cargo-contracts"},"Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"cargo-contracts")),(0,i.kt)("p",null,"Using cargo-contract will create a new folder with the basic code of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"Flipper")," contract."),(0,i.kt)("p",null,"Run the command ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo contract new my_contract"),"."),(0,i.kt)("h2",{id:"manual-mode"},"Manual Mode"),(0,i.kt)("p",null,"Each contract should be in its own crate. In a folder create two files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cargo.toml: The manifest"),(0,i.kt)("li",{parentName:"ul"},"lib.rs: The default library file\nInside the Cargo.toml specify the ",(0,i.kt)("inlineCode",{parentName:"li"},"[package]"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"[dependencies]")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"[lib]")," type and ",(0,i.kt)("inlineCode",{parentName:"li"},"[features]"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "my_contract"\nversion = "3.0.0"\nauthors = ["Your Name <name@email.com>"]\nedition = "2021"\n\n[dependencies]\nink_primitives = { tag = "v3.0.0", git = "<https://github.com/paritytech/ink>", default-features = false }\nink_metadata = { tag = "v3.0.0", git = "<https://github.com/paritytech/ink>", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0", git = "<https://github.com/paritytech/ink>", default-features = false }\nink_storage = { tag = "v3.0.0", git = "<https://github.com/paritytech/ink>", default-features = false }\nink_lang = { tag = "v3.0.0", git = "<https://github.com/paritytech/ink>", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }\nscale-info = { version = "2", default-features = false, features = ["derive"], optional = true }\n\n[lib]\nname = "my_contract"\npath = "lib.rs"\ncrate-type = ["cdylib"]\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink_primitives/std",\n    "ink_metadata/std",\n    "ink_env/std",\n    "ink_storage/std",\n    "ink_lang/std",\n    "scale/std",\n    "scale-info/std",\n]\nink-as-dependency = []\n')),(0,i.kt)("p",null,"In the library file - ink! has some minimum requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'#![cfg_attr(not(feature = "std"), no_std)]')," at the beginning of each contract file link"),(0,i.kt)("li",{parentName:"ul"},"a module with ",(0,i.kt)("inlineCode",{parentName:"li"},"#[ink::contract]")),(0,i.kt)("li",{parentName:"ul"},"a (storage) struct - that can be empty - with ",(0,i.kt)("inlineCode",{parentName:"li"},"#[ink(storage)]")),(0,i.kt)("li",{parentName:"ul"},"at least one constructor with ",(0,i.kt)("inlineCode",{parentName:"li"},"#[ink(constructor)]")),(0,i.kt)("li",{parentName:"ul"},"at least one fn with ",(0,i.kt)("inlineCode",{parentName:"li"},"#[ink(message)]"))),(0,i.kt)("p",null,"In the lib.rs the minimum implementation is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n#[ink::contract]\nmod my_contract {\n\n    #[ink(storage)]\n    pub struct MyContract {}\n\n    impl MyContract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        #[ink(message)]\n        pub fn do_nothing(&self) {\n            ()\n        }\n    }\n}\n')))}m.isMDXComponent=!0}}]);